version: "3"
services:
  proxy:
    profiles:
      - development:ssl
    image: nginx:1.19.10-alpine
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./proxy/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./proxy/certs:/etc/nginx/certs
    depends_on:
      - frontend-ssl
    networks:
      - mynetwork
    links:
      - frontend-ssl
    environment:
      - "NGINX_HOST=${NGINX_HOST}"
  frontend:
    profiles:
      - development
      - test:frontend
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
    expose: 
      - ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - mynetwork
    environment:
      CHOKIDAR_USEPOLLING: 1
      PORT: ${FRONTEND_PORT}
      NODE_ENV: ${NODE_ENV}
      REACT_APP_PROXY_URL: ${REACT_APP_PROXY_URL}
    command: yarn workspace @team-10/frontend run ${NODE_ENV}
    links:
      - backend
    volumes:
      - ./packages/lib/:/app/packages/lib/
      - ./packages/frontend/:/app/packages/frontend/
  frontend-ssl:
    profiles:
      - development:ssl
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
    ports:
      - ${FRONTEND_PORT}
    networks:
      - mynetwork
    environment:
      CHOKIDAR_USEPOLLING: 1
      PORT: ${FRONTEND_PORT}
      NODE_ENV: ${NODE_ENV}
      REACT_APP_PROXY_URL: ${REACT_APP_PROXY_URL}
    command: yarn workspace @team-10/frontend run ${NODE_ENV}
    links:
      - backend
    volumes:
      - ./packages/lib/:/app/packages/lib/
      - ./packages/frontend/:/app/packages/frontend/
  backend:
    profiles:
      - development
      - development:ssl
      - production
      - test:backend
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
    expose: 
      - ${BACKEND_PORT}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - mynetwork
    depends_on:
      - postgres
    environment:
      CHOKIDAR_USEPOLLING: 1
      PORT: ${BACKEND_PORT}
      DATABASE_URL: "pg://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}"
      SESSION_SECRET: ${SESSION_SECRET}
      NODE_ENV: ${NODE_ENV}
      AUTH_NAVER_CALLBACK_URL: "${AUTH_NAVER_CALLBACK_HOST}:${FRONTEND_PORT}/api/auth/naver/callback"
      AUTH_NAVER_CLIENT_ID: ${AUTH_NAVER_CLIENT_ID}
      AUTH_NAVER_CLIENT_SECRET: ${AUTH_NAVER_CLIENT_SECRET}
    command: yarn workspace @team-10/backend run ${NODE_ENV}
    volumes:
      - ./packages/lib/:/app/packages/lib/
      - ./packages/backend/:/app/packages/backend/
  postgres:
    image: postgres:10.4
    profiles:
      - development
      - development:ssl
      - production
      - test:frontend
    ports:
      - "35432:5432"
    networks:
      - mynetwork
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}

networks:
  mynetwork:

volumes:
  letsencrypt:
